const s=()=>{if(typeof growiFacade>"u"||growiFacade.markdownRenderer==null)return;const u=()=>{const c=document.createTreeWalker(document.body,NodeFilter.SHOW_TEXT);let t;for(;t=c.nextNode();){const o=t.nodeValue;if(!o)continue;const n=/\[input\s+name="([^"]+)"\s+placeholder="([^"]+)"\]/g;let e,d=!1,a=0;const l=document.createDocumentFragment();for(;(e=n.exec(o))!==null;){d=!0,l.appendChild(document.createTextNode(o.slice(a,e.index)));const r=document.createElement("input");r.type="text",r.name=e[1],r.placeholder=e[2],l.appendChild(r),a=n.lastIndex}d&&(l.appendChild(document.createTextNode(o.slice(a))),t.parentNode?.replaceChild(l,t))}},i=()=>{const c=document.querySelectorAll("input[name]"),t={};c.forEach(e=>{t[e.name]=e.value});const o=document.createTreeWalker(document.body,NodeFilter.SHOW_TEXT,null);let n;for(;n=o.nextNode();){if(!n.nodeValue)continue;let e=n.nodeValue;Object.entries(t).forEach(([d,a])=>{const l=new RegExp(`{{${d}}}`,"g");e=e.replace(l,a)}),n.nodeValue=e}};u(),i(),document.querySelectorAll("input[name]").forEach(c=>{c.addEventListener("input",i)})},p=()=>{};window.pluginActivators==null&&(window.pluginActivators={});window.pluginActivators["growi-plugin-input-replace"]={activate:s,deactivate:p};
