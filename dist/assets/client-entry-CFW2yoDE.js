const p=()=>{if(typeof growiFacade>"u"||growiFacade.markdownRenderer==null)return;const s=()=>{const r=document.createTreeWalker(document.body,NodeFilter.SHOW_TEXT);let t;for(;t=r.nextNode();){const o=t.nodeValue;if(!o)continue;const n=/\[input\s+name="([^"]+)"\s+placeholder="([^"]+)"\]/g;let e,c=0;const a=t.parentNode;if(!a)continue;const l=[];for(;(e=n.exec(o))!==null;){const i=document.createTextNode(o.slice(c,e.index));l.push(i);const d=document.createElement("input");d.type="text",d.name=e[1],d.placeholder=e[2],l.push(d),c=n.lastIndex}c>0&&(l.push(document.createTextNode(o.slice(c))),l.forEach(i=>a.insertBefore(i,t)),a.removeChild(t))}},u=()=>{const r=document.querySelectorAll("input[name]"),t={};r.forEach(e=>{t[e.name]=e.value});const o=document.createTreeWalker(document.body,NodeFilter.SHOW_TEXT,null);let n;for(;n=o.nextNode();){if(!n.nodeValue)continue;let e=n.nodeValue;Object.entries(t).forEach(([c,a])=>{const l=new RegExp(`{{${c}}}`,"g");e=e.replace(l,a)}),n.nodeValue=e}};s(),u(),document.querySelectorAll("input[name]").forEach(r=>{r.addEventListener("input",u)})},m=()=>{};window.pluginActivators==null&&(window.pluginActivators={});window.pluginActivators["growi-plugin-input-replace"]={activate:p,deactivate:m};
